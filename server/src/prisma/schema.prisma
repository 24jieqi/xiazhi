// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 词条编辑记录
model Record {
  record_id     Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  entry         Entry?   @relation(fields: [entryEntry_id], references: [entry_id])
  entryEntry_id Int?
  prevLangs     Json?
  currLangs     Json?
  prevKey       String?
  currKey       String?
  creator       Int?
}

// 词条
model Entry {
  entry_id      Int      @id @default(autoincrement())
  key           String?
  createBy      User?    @relation(fields: [creatorId], references: [user_id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  archive       Boolean  @default(false)
  deleted       Boolean  @default(false)
  modifyRecords Record[]
  mainLang      String   @default("zh")
  mainLangText  String?
  langs         Json?
  belongsTo     App?     @relation(fields: [appId], references: [app_id])
  uploaded      Boolean  @default(false)
  creatorId     Int?
  appId         Int?
  basedOn       Entry?   @relation("EntryRelation", fields: [basedOnId], references: [entry_id])
  basedOnId     Int?     @unique
  base          Entry[]  @relation("EntryRelation")
}

// 应用
model App {
  app_id       Int            @id @default(autoincrement())
  name         String
  description  String?
  type         AppType
  languages    String[]
  pictures     String[]
  createdAt    DateTime       @default(now())
  accessKey    String?
  deleted      Boolean        @default(false)
  archived     Boolean        @default(false)
  push         Boolean        @default(true)
  access       Boolean        @default(true)
  creator      User?          @relation(fields: [creatorId], references: [user_id])
  creatorId    Int?
  entries      Entry[]
  collaborator Collaborator[]
}

// 协作者
model Collaborator {
  id         Int                      @id @default(autoincrement())
  role       CollaboratorRole         @default(TRANSLATOR)
  assignedAt DateTime                 @default(now())
  user       User                     @relation(fields: [userId], references: [user_id])
  app        App                      @relation(fields: [appId], references: [app_id])
  userId     Int
  appId      Int
  status     CollaboratorInviteStatus @default(PENDDING)
}

model User {
  user_id      Int            @id @default(autoincrement())
  account      String?
  email        String         @unique
  phone        String?        @unique
  nickName     String?
  name         String?
  role         UserRole?
  avatar       String?
  password     String
  createdAt    DateTime       @default(now())
  apps         App[]
  feedback     Feedback[]
  verifyType   String?
  entry        Entry[]
  collaborator Collaborator[]
}

model Feedback {
  feedback_id Int     @id @default(autoincrement())
  user        User?   @relation(fields: [userUser_id], references: [user_id])
  userUser_id Int?
  message     String?
  result      Boolean
}

enum AppType {
  TOOL
  EFFICIENCY
  MUSIC
  FINANCE
  GAME
  CONTACT
  OTHER
  EDUCATION
}

enum UserRole {
  DEVELOPER
  TRANSLATOR
  MANAGER
  OTHER
}

enum CollaboratorRole {
  MANAGER
  GUEST
  TRANSLATOR
}

enum CollaboratorInviteStatus {
  PENDDING
  DONE
  REJECT
}
